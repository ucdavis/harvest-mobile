trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - "*"

variables:
  NODE_VERSION: "20.x"

stages:
  - stage: Checks
    displayName: Fast checks (no builds)
    jobs:
      - job: fast_checks
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "$(NODE_VERSION)"
            displayName: "Use Node $(NODE_VERSION)"

          - script: corepack enable
            displayName: "Enable Corepack (pnpm/yarn if you use them)"

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
              path: "$(Pipeline.Workspace)/.npm"
              restoreKeys: 'npm | "$(Agent.OS)" |'
            displayName: "Cache NPM"

          - script: |
              export NPM_CONFIG_CACHE="$(Pipeline.Workspace)/.npm"
              npm ci
            displayName: "Install deps"

          # health checks (Expo Doctor)
          - script: npx --yes expo-doctor
            displayName: "expo-doctor"

          - script: npm run typecheck
            displayName: "Typecheck"

          - script: npm run lint
            displayName: "ESLint"

          # # 4) Tests (+ JUnit + coverage if configured)
          # - script: npm run test:ci --if-present || npx jest --ci
          #   displayName: "Unit tests (Jest)"

          # - task: PublishTestResults@2
          #   condition: succeededOrFailed()
          #   inputs:
          #     testResultsFormat: "JUnit"
          #     testResultsFiles: "**/junit.xml"
          #     failTaskOnFailedTests: true
          #     testRunTitle: "Jest"

          # - task: PublishCodeCoverageResults@2
          #   condition: succeededOrFailed()
          #   inputs:
          #     codeCoverageTool: "Cobertura"
          #     summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/cobertura-coverage.xml"
          #     reportDirectory: "$(System.DefaultWorkingDirectory)/**/coverage"
          #     failIfCoverageEmpty: false

          # quick bundle smoke test (catches Metro/bundle errors)
          - script: npx expo export --no-source-map
            displayName: "Bundle smoke test (Metro export)"
            continueOnError: true # flip to false if you want it to gate PRs
